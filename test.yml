env: |
  from random import seed, sample
  from string import ascii_letters, digits
  import hashlib

  magic_md5 = '$1$'

  def gen_salt( length=8, symbols=ascii_letters + digits ):
    seed()
    return ''.join( sample( symbols, length ) )

  def encrypt(password):
    salt = gen_salt()
    return encrypt_md5(password, salt)

  def encrypt_md5( raw_pw, salt, magic=magic_md5 ):
    raw_pw = raw_pw.encode('utf-8')
    salt = salt.encode('utf-8')
    hash = hashlib.md5()
    hash.update( raw_pw + magic + salt )
    st = hashlib.md5()
    st.update( raw_pw + salt + raw_pw)
    stretch = st.digest()

    for i in range( 0, len( raw_pw ) ):
        hash.update( stretch[i % 16] )

    i = len( raw_pw )

    while i:
        if i & 1:
            hash.update('\x00')
        else:
            hash.update( raw_pw[0] )
        i >>= 1

    saltedmd5 = hash.digest()

    for i in range( 1000 ):
        hash = hashlib.md5()

        if i & 1:
            hash.update( raw_pw )
        else:
            hash.update( saltedmd5 )

        if i % 3:
            hash.update( salt )
        if i % 7:
            hash.update( raw_pw )
        if i & 1:
            hash.update( saltedmd5 )
        else:
            hash.update( raw_pw )

        saltedmd5 = hash.digest()

    itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'

    rearranged = ''
    for a, b, c in ((0, 6, 12), (1, 7, 13), (2, 8, 14), (3, 9, 15), (4, 10, 5)):
        v = ord( saltedmd5[a] ) << 16 | ord( saltedmd5[b] ) << 8 | ord( saltedmd5[c] )

        for i in range(4):
            rearranged += itoa64[v & 0x3f]
            v >>= 6

    v = ord( saltedmd5[11] )

    for i in range( 2 ):
        rearranged += itoa64[v & 0x3f]
        v >>= 6

    return magic + salt + '$' + rearranged

actions:
- clear:
  - table:
    - res_license
- replace:
  - field:
    - res_partner_contact:
        name: "'name_%s' % (id, )"
        last_name: "'last_name_%s' % (id, )"
        first_name: "'first_name_%s' % (id, )"
    - res_partner_contact:
        --where: "nom_marital IS NOT NULL"
        nom_marital: "'nom_marital_%s' % (id, )"
    - res_partner_contact:
        --where: "birthdate IS NOT NULL"
        birthdate: "'01/01/%s' % birthdate[-4:]"
    - res_users:
        --where: "login NOT IN ('admin', 'carif1')"
        login: "'login_%s' % (id, )"
        password: encrypt('test')
        name: "'name_%s' % (id, )"
        user_email: "'email@valeur.anonyme'"
    - sit_public_enquete:
        --where: "enqueteur IS NOT NULL"
        enqueteur: "'enqueteur_%s' % (id, )"
    - res_company:
        --where: "id NOT IN (1, 963)"
        name: "'company_%s' % (id, )"
    - sit_public_passeport_formation:
        name: "'name_%s' % (id, )"
        organisme: "'organisme_%s' % (id, )"


